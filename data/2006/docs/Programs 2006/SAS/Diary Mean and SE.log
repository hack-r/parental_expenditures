1217    /***************************************************************************/
1218    /* PROGRAM NAME:  CEX DIARY SURVEY SAMPLE PROGRAM (SAS)                    */
1219    /* LOCATION: D:\PROGRAMS                                                   */
1220    /* FUNCTION: CREATE A DIARY SURVEY EXPENDITURE TABLE BY INCOME CLASS USING */
1221    /*           MICRODATA FROM THE BUREAU OF LABOR STATISTIC'S CONSUMER       */
1222    /*           EXPENDITURE SURVEY.                                           */
1223    /*                                                                         */
1224    /* WRITTEN BY:  ERIC KEIL                                                  */
1225    /* MODIFICATIONS:                                                          */
1226    /* DATE-      MODIFIED BY-      REASON-                                    */
1227    /* -----      ------------      -------                                    */
1228    /* 03/21/02   ERIC KEIL         IMPROVE EFFICIENCY                         */
1229    /* 10/22/03   ERIC KEIL         UPDATE FOR 2002 DATA                       */
1230    /* 11/20/03   ERIC KEIL         INCLUDE ROUTINE TO AGGREGATE EASIER        */
1231    /*                                                                         */
1232    /*  FOR SAS VERSION 8 OR HIGHER                                            */
1233    /*                                                                         */
1234    /***************************************************************************/
1235
1236  /*Enter Data Year*/
1237  %LET YEAR = XXXX;
1238  /*enter location of the unzipped microdata file*/
      /*Be sure to keep the same file structure as on the CD*/
1239  %LET DRIVE = XXXXSASCD;
1240
1241    /***************************************************************************/
1242    /* STEP1: READ IN THE STUB PARAMETER FILE AND CREATE FORMATS               */
1243    /* ----------------------------------------------------------------------- */
1244    /* 1 CONVERTS THE STUB PARAMETER FILE INTO A LABEL FILE FOR OUTPUT         */
1245    /* 2 CONVERTS THE STUB PARAMETER FILE INTO AN EXPENDITURE AGGREGATION FILE */
1246    /* 3 CREATES FORMATS FOR USE IN OTHER PROCEDURES                           */
1247    /***************************************************************************/
1248
1249
1250  %LET YR1 = %SUBSTR(&YEAR,3,2);
1251  LIBNAME D&YR1 "&DRIVE.\DIARY&YR1";
NOTE: Libref D06 was successfully assigned as follows:
      Engine:        V9
      Physical Name: \\ceis1\ods\UnitTest\Pubs\MicrodataTransfer\2006SASCD\DIARY06
1252
1253
1254  DATA STUBFILE (KEEP= COUNT TYPE LEVEL TITLE UCC SURVEY GROUP LINE);
1255    INFILE "P:\Phase 4 Production (BIA)\Microdata\2006 Processing\Sample Programs\DSTUB&YEAR..TXT"
1256    PAD MISSOVER;
1257    INPUT @1 TYPE $1. @ 4 LEVEL $1. @7 TITLE $60. @70 UCC $6.
1258          @80 SURVEY $1. @86 GROUP $7.;
1259    IF (TYPE = '1');
1260    IF GROUP IN ('CUCHARS' 'FOOD' 'EXPEND' 'INCOME');
1261    IF SURVEY = 'T' THEN DELETE;
1262      RETAIN COUNT 9999;
1263      COUNT + 1;
1264      LINE = PUT(COUNT, $5.)||LEVEL ;
WARNING: Variable COUNT has already been defined as numeric.
1265      /* READS IN THE STUB PARAMETER FILE AND CREATES LINE NUMBERS FOR UCCS */
1266      /* A UNIQUE LINE NUMBER IS ASSIGNED TO EACH EXPENDITURE LINE ITEM     */
1267  RUN;

NOTE: The infile "P:\Phase 4 Production (BIA)\Microdata\2006 Processing\Sample Programs\DSTUB2006.TXT" is:
      File Name=P:\Phase 4 Production (BIA)\Microdata\2006 Processing\Sample Programs\DSTUB2006.TXT,
      RECFM=V,LRECL=256

NOTE: 768 records were read from the infile "P:\Phase 4 Production (BIA)\Microdata\2006 Processing\Sample Programs\DSTUB2006.TXT".
      The minimum record length was 104.
      The maximum record length was 105.
NOTE: The data set WORK.STUBFILE has 469 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.00 seconds


1268
1269
1270  DATA AGGFMT1 (KEEP= UCC LINE LINE1-LINE10);
1271    SET STUBFILE;
1272    LENGTH LINE1-LINE10 $6.;
1273      ARRAY LINES(9) LINE1-LINE9;
1274        IF (UCC > 'A') THEN
1275          LINES(SUBSTR(LINE,6,1)) = LINE;
1276        RETAIN LINE1-LINE9;
1277        IF (UCC < 'A')  THEN
1278          LINE10 = LINE;
1279    IF (LINE10);
1280  RUN;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      1275:15   1279:7
NOTE: There were 469 observations read from the data set WORK.STUBFILE.
NOTE: The data set WORK.AGGFMT1 has 340 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds


1281
1282
1283  PROC SORT DATA= AGGFMT1 (RENAME=(LINE= COMPARE));
1284    BY UCC;
1285      /* MAPS LINE NUMBERS TO UCCS */
1286  RUN;

NOTE: There were 340 observations read from the data set WORK.AGGFMT1.
NOTE: The data set WORK.AGGFMT1 has 340 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds


1287
1288
1289  PROC TRANSPOSE DATA= AGGFMT1 OUT= AGGFMT2 (RENAME=(COL1= LINE));
1290    BY UCC COMPARE;
1291    VAR LINE1-LINE10;
1292  RUN;

NOTE: There were 340 observations read from the data set WORK.AGGFMT1.
NOTE: The data set WORK.AGGFMT2 has 3400 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds


1293
1294
1295  DATA AGGFMT (KEEP= UCC LINE);
1296    SET AGGFMT2;
1297      IF LINE;
1298      IF SUBSTR(COMPARE,6,1) > SUBSTR(LINE,6,1) OR COMPARE=LINE;
1299      /* AGGREGATION FILE. EXTRANEOUS MAPPINGS ARE DELETED            */
1300      /* PROC SQL WILL AGGANGE LINE#/UCC PAIRS FOR USE IN PROC FORMAT */
1301  RUN;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      1297:8
NOTE: There were 3400 observations read from the data set WORK.AGGFMT2.
NOTE: The data set WORK.AGGFMT has 1375 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds


1302
1303
1304  PROC SQL NOPRINT;
1305    SELECT UCC, LINE, COUNT(*)
1306    INTO  :UCCS SEPARATED BY " ",
1307          :LINES SEPARATED BY " ",
1308          :CNT
1309    FROM AGGFMT;
NOTE: The query requires remerging summary statistics back with the original data.
1310    QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.25 seconds
      cpu time            0.03 seconds


1311  RUN;
1312
1313
1314  %MACRO MAPPING;
1315    %DO  I = 1  %TO  &CNT;
1316      "%SCAN(&UCCS,&I,%STR( ))" = "%SCAN(&LINES,&I,%STR( ))"
1317    %END;
1318  %MEND MAPPING;
1319
1320
1321  DATA LBLFMT (RENAME=(LINE= START TITLE= LABEL));
1322    SET STUBFILE (KEEP= LINE TITLE);
1323    RETAIN FMTNAME 'LBLFMT' TYPE 'C';
1324    /* LABEL FILE. LINE NUMBERS ARE ASSIGNED A TEXT LABEL */
1325    /* DATASET CONSTRUCTED TO BE READ INTO A PROC FORMAT  */
1326  RUN;

NOTE: There were 469 observations read from the data set WORK.STUBFILE.
NOTE: The data set WORK.LBLFMT has 469 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds


1327
1328
1329  PROC FORMAT;
1330
1331    VALUE $AGGFMT (MULTILABEL)
1332      %MAPPING
1333      OTHER= 'OTHER';
NOTE: Format $AGGFMT is already on the library.
NOTE: Format $AGGFMT has been output.
1334      /* CREATE AGGREGATION FORMAT */
1335
1336
1337    VALUE $INC (MULTILABEL)
1338      '01' = '01'
1339      '01' = '10'
1340      '02' = '02'
1341      '02' = '10'
1342      '03' = '03'
1343      '03' = '10'
1344      '04' = '04'
1345      '04' = '10'
1346      '05' = '05'
1347      '05' = '10'
1348      '06' = '06'
1349      '06' = '10'
1350      '07' = '07'
1351      '07' = '10'
1352      '08' = '08'
1353      '08' = '10'
1354      '09' = '09'
1355      '09' = '10';
NOTE: Format $INC is already on the library.
NOTE: Format $INC has been output.
1356      /* CREATE INCOME CLASS FORMAT */
1357  RUN;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           6.68 seconds
      cpu time            5.76 seconds


1358
1359
1360  PROC FORMAT LIBRARY= WORK  CNTLIN= LBLFMT;
NOTE: Format $LBLFMT is already on the library.
NOTE: Format $LBLFMT has been output.
1361    /* CREATE LABEL FILE FORMATS */
1362  RUN;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds

NOTE: There were 469 observations read from the data set WORK.LBLFMT.

1363
1364
1365    /***************************************************************************/
1366    /* STEP2: READ IN ALL NEEDED DATA FROM THE CD-ROM                          */
1367    /* ----------------------------------------------------------------------- */
1368    /* 1 READ IN THE DIARY FMLY FILES                                          */
1369    /* 2 READ IN THE DIARY EXPM AND DTAB FILES                                 */
1370    /* 3 MERGE FMLY AND EXPENDITURE FILES TO DERIVE WEIGHTED EXPENDITURES      */
1371    /***************************************************************************/
1372
1373
1374  DATA FMLY (KEEP = NEWID INCLASS REPWT1-REPWT45);
1375    SET D&YR1..FMLD&YR1.1
1376        D&YR1..FMLD&YR1.2
1377        D&YR1..FMLD&YR1.3
1378        D&YR1..FMLD&YR1.4;
1379        BY NEWID;
1380        /* READ IN FMLY FILE DATA */
1381
1382      ARRAY REPS_A(45) WTREP01-WTREP44 FINLWT21;
1383      ARRAY REPS_B(45) REPWT1-REPWT45;
1384
1385        DO i = 1 TO 45;
1386        IF REPS_A(i) > 0 THEN
1387           REPS_B(i) = (REPS_A(i) / 4);
1388           ELSE REPS_B(i) = 0;
1389        END;
1390        /* ADJUST WEIGHTS TO COMPENSATE FOR HAVING FOUR QUARTERS OF DATA */
1391  RUN;

NOTE: There were 3483 observations read from the data set D06.FMLD061.
NOTE: There were 3602 observations read from the data set D06.FMLD062.
NOTE: There were 3712 observations read from the data set D06.FMLD063.
NOTE: There were 3658 observations read from the data set D06.FMLD064.
NOTE: The data set WORK.FMLY has 14455 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           5.81 seconds
      cpu time            0.32 seconds


1392
1393
1394
1395  DATA EXPEND (KEEP = NEWID UCC COST);
1396    SET D&YR1..DTBD&YR1.1 (RENAME=(AMOUNT=COST))
1397        D&YR1..DTBD&YR1.2 (RENAME=(AMOUNT=COST))
1398        D&YR1..DTBD&YR1.3 (RENAME=(AMOUNT=COST))
1399        D&YR1..DTBD&YR1.4 (RENAME=(AMOUNT=COST))
1400        D&YR1..EXPD&YR1.1
1401        D&YR1..EXPD&YR1.2
1402        D&YR1..EXPD&YR1.3
1403        D&YR1..EXPD&YR1.4;
1404    BY NEWID;
1405    /* READ IN INCOME AND EXPENDITURE DATA */
1406  RUN;

NOTE: There were 59851 observations read from the data set D06.DTBD061.
NOTE: There were 62257 observations read from the data set D06.DTBD062.
NOTE: There were 63756 observations read from the data set D06.DTBD063.
NOTE: There were 62458 observations read from the data set D06.DTBD064.
NOTE: There were 136508 observations read from the data set D06.EXPD061.
NOTE: There were 143612 observations read from the data set D06.EXPD062.
NOTE: There were 147263 observations read from the data set D06.EXPD063.
NOTE: There were 144684 observations read from the data set D06.EXPD064.
NOTE: The data set WORK.EXPEND has 820389 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           3.32 seconds
      cpu time            0.90 seconds


1407
1408
1409
1410  DATA PUBFILE (KEEP = NEWID INCLASS UCC RCOST1-RCOST45);
1411    MERGE FMLY   (IN = INFAM)
1412          EXPEND (IN = INEXP);
1413    BY NEWID;
1414    IF INEXP AND INFAM;
1415
1416    IF COST = .  THEN
1417       COST = 0;
1418
1419       ARRAY REPS_A(45) REPWT1-REPWT45;
1420       ARRAY REPS_B(45) RCOST1-RCOST45;
1421
1422       DO i = 1 TO 45;
1423         IF REPS_A(i)> 0
1424           THEN REPS_B(i) = (REPS_A(i) * COST);
1425           ELSE REPS_B(i) = 0;
1426       END;
1427       /* MERGE FMLY FILE WEIGHTS AND CHARACTERISTICS WITH EXPN/DTAB COSTS */
1428       /* MULTIPLY COSTS BY WEIGHTS TO DERIVE WEIGHTED COSTS               */
1429  RUN;

NOTE: There were 14455 observations read from the data set WORK.FMLY.
NOTE: There were 820389 observations read from the data set WORK.EXPEND.
NOTE: The data set WORK.PUBFILE has 820389 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           32.71 seconds
      cpu time            5.31 seconds


1430
1431
1432    /***************************************************************************/
1433    /* STEP3: CALCULATE POPULATIONS                                            */
1434    /* ----------------------------------------------------------------------- */
1435    /* 1 SUM ALL 45 WEIGHT VARIABLES TO DERIVE REPLICATE POPULATIONS           */
1436    /* 2 FORMAT FOR CORRECT COLUMN CLASSIFICATIONS                             */
1437    /***************************************************************************/
1438
1439
1440  PROC SUMMARY NWAY DATA=FMLY;
1441    CLASS INCLASS / MLF;
1442    VAR REPWT1-REPWT45;
1443    FORMAT INCLASS $INC.;
1444    OUTPUT OUT = POP (DROP = _TYPE_ _FREQ_) SUM = RPOP1-RPOP45;
1445    /* SUMS WEIGHTS TO CREATE POPULATIONS PER REPLICATE */
1446    /* FORMATS TO CORRECT COLUMN CLASSIFICATIONS        */
1447  RUN;

NOTE: There were 14455 observations read from the data set WORK.FMLY.
NOTE: The data set WORK.POP has 10 observations and 46 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           3.28 seconds
      cpu time            0.14 seconds


1448
1449
1450
1451    /***************************************************************************/
1452    /* STEP4: CALCULATE WEIGHTED AGGREGATE EXPENDITURES                        */
1453    /* ----------------------------------------------------------------------- */
1454    /* 1 SUM THE 45 REPLICATE WEIGHTED EXPENDITURES TO DERIVE AGGREGATES       */
1455    /* 2 FORMAT FOR CORRECT COLUMN CLASSIFICATIONS AND AGGREGATION SCHEME      */
1456    /***************************************************************************/
1457
1458
1459  PROC SUMMARY NWAY DATA=PUBFILE SUMSIZE=MAX COMPLETETYPES;
1460    CLASS UCC INCLASS / MLF;
1461    VAR RCOST1-RCOST45;
1462    FORMAT UCC $AGGFMT. INCLASS $INC.;
1463     OUTPUT OUT=AGG (DROP= _TYPE_ _FREQ_  RENAME=(UCC=LINE))
1464     SUM = RCOST1-RCOST45;
1465    /* SUMS WEIGHTED COSTS PER REPLICATE TO GET AGGREGATES */
1466    /* FORMATS INCOME TO CREATE COMPLETE REPORTING COLUMN  */
1467    /* FORMATS EXPENDITURES TO CORRECT AGGREGATION SCHEME  */
1468  RUN;

NOTE: There were 820389 observations read from the data set WORK.PUBFILE.
NOTE: The data set WORK.AGG has 4540 observations and 47 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           43.95 seconds
      cpu time            17.84 seconds


1469
1470
1471
1472    /***************************************************************************/
1473    /* STEP5: CALCULTATE MEAN EXPENDITURES                                     */
1474    /* ----------------------------------------------------------------------- */
1475    /* 1 READ IN POPULATIONS AND LOAD INTO MEMORY USING A 2 DIMENSIONAL ARRAY  */
1476    /*   POPULATIONS ARE ASSOCIATED BY INCLASS(i), AND REPLICATE(j)            */
1477    /* 2 READ IN AGGREGATE EXPENDITURES FROM AGG DATASET                       */
1478    /*   CALCULATE MEANS BY DIVIDING AGGREGATES BY CORRECT SOURCE POPULATIONS  */
1479    /* 4 CALCULATE STANDARD ERRORS USING REPLICATE FORMULA                     */
1480    /***************************************************************************/
1481
1482
1483  DATA TAB1 (KEEP = LINE MEAN SE);
1484
1485    /* READS IN POP DATASET. _TEMPORARY_ LOADS POPULATIONS INTO SYSTEM MEMORY  */
1486    ARRAY POP{01:10,45} _TEMPORARY_;
1487    IF _N_ = 1 THEN DO i = 1 TO 10;
1488      SET POP;
1489      ARRAY REPS(45) RPOP1-RPOP45;
1490        DO j = 1 TO 45;
1491          POP{INCLASS,j} = REPS(j);
1492        END;
1493      END;
1494
1495    /* READS IN AGG DATASET AND CALCULATES MEANS BY DIVIDING BY POPULATIONS  */
1496    SET AGG (KEEP = LINE INCLASS RCOST1-RCOST45);
1497      ARRAY AGGS(45) RCOST1-RCOST45;
1498      ARRAY AVGS(45) MEAN1-MEAN44 MEAN;
1499        DO k = 1 TO 45;
1500          IF AGGS(k) = . THEN AGGS(k) = 0;
1501          AVGS(k) = AGGS(k) / POP{INCLASS,k};
1502        END;
1503
1504    /* CALCULATES STANDARD ERRORS USING REPLICATE FORMULA  */
1505    ARRAY RMNS(44) MEAN1-MEAN44;
1506    ARRAY DIFF(44) DIFF1-DIFF44;
1507      DO n = 1 TO 44;
1508        DIFF(n) = (RMNS(n) - MEAN)**2;
1509      END;
1510    SE = SQRT((1/44)*SUM(OF DIFF(*)));
1511  RUN;

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      1491:13   1501:33
NOTE: There were 10 observations read from the data set WORK.POP.
NOTE: There were 4540 observations read from the data set WORK.AGG.
NOTE: The data set WORK.TAB1 has 4540 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           1.40 seconds
      cpu time            0.07 seconds


1512
1513
1514
1515    /***************************************************************************/
1516    /* STEP6: TABULATE EXPENDITURES                                            */
1517    /* ----------------------------------------------------------------------- */
1518    /* 1 ARRANGE DATA INTO TABULAR FORM                                        */
1519    /* 2 SET OUT DIARY POPULATIONS FOR POPULATION LINE ITEM                    */
1520    /* 3 INSERT POPULATION LINE INTO TABLE                                     */
1521    /* 4 INSERT ZERO EXPENDITURE LINE ITEMS INTO TABLE FOR COMPLETENESS        */
1522    /***************************************************************************/
1523
1524
1525  PROC TRANSPOSE DATA=TAB1 OUT=TAB2
1526    NAME = ESTIMATE PREFIX = INCLASS;
1527    BY LINE;
1528    VAR MEAN SE;
1529    /*ARRANGE DATA INTO TABULAR FORM */
1530  RUN;

NOTE: There were 4540 observations read from the data set WORK.TAB1.
NOTE: The data set WORK.TAB2 has 908 observations and 12 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.81 seconds
      cpu time            0.00 seconds


1531
1532
1533  PROC TRANSPOSE DATA=POP (KEEP = RPOP45) OUT=CUS
1534    NAME = LINE PREFIX = INCLASS;
1535    VAR RPOP45;
1536    /* SET ASIDE POPULATIONS FROM DIARY */
1537  RUN;

NOTE: There were 10 observations read from the data set WORK.POP.
NOTE: The data set WORK.CUS has 1 observations and 11 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.23 seconds
      cpu time            0.00 seconds


1538
1539
1540  DATA TAB3;
1541    SET CUS TAB2;
1542    IF LINE = 'RPOP45' THEN DO;
1543      LINE = '100001';
1544      ESTIMATE = 'N';
1545      END;
1546    /* INSERT POPULATION LINE ITEM INTO TABLE AND ASSIGN LINE NUMBER */
1547  RUN;

NOTE: There were 1 observations read from the data set WORK.CUS.
NOTE: There were 908 observations read from the data set WORK.TAB2.
NOTE: The data set WORK.TAB3 has 909 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.01 seconds


1548
1549
1550  DATA TAB;
1551    MERGE TAB3 STUBFILE;
1552    BY LINE;
1553      IF LINE NE '100001' THEN DO;
1554        IF SURVEY = 'S' THEN DELETE;
1555      END;
1556      ARRAY CNTRL(10) INCLASS1-INCLASS10;
1557        DO i = 1 TO 10;
1558          IF CNTRL(i) = . THEN CNTRL(i) = 0;
1559          IF SUM(OF CNTRL(*)) = 0 THEN ESTIMATE = 'MEAN';
1560        END;
1561
1562      IF GROUP IN ('CUCHARS' 'INCOME') THEN DO;
1563        IF LAG(LINE) = LINE THEN DELETE;
1564      END;
1565    /* MERGE STUBFILE BACK INTO TABLE TO INSERT EXPENDITURE LINES */
1566    /* THAT HAD ZERO EXPENDITURES FOR THE YEAR                    */
1567  RUN;

NOTE: There were 909 observations read from the data set WORK.TAB3.
NOTE: There were 469 observations read from the data set WORK.STUBFILE.
NOTE: The data set WORK.TAB has 844 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.38 seconds
      cpu time            0.00 seconds


1568
1569
1570  PROC TABULATE DATA=TAB;
1571    CLASS LINE / GROUPINTERNAL ORDER=DATA;
1572    CLASS ESTIMATE;
1573    VAR INCLASS1-INCLASS10;
1574    FORMAT LINE $LBLFMT.;
1575
1576      TABLE (LINE * ESTIMATE), (INCLASS10 INCLASS1 INCLASS2 INCLASS3 INCLASS4
1577                                INCLASS5  INCLASS6 INCLASS7 INCLASS8 INCLASS9)
1578      *SUM='' / RTS=25;
1579      LABEL ESTIMATE=ESTIMATE LINE=LINE
1580            INCLASS1='LESS THAN $5,000'   INCLASS2='$5,000 TO $9,999'
1581            INCLASS3='$10,000 TO $14,999' INCLASS4='$15,000 TO $19,999'
1582            INCLASS5='$20,000 TO $29,999' INCLASS6='$30,000 TO $39,999'
1583            INCLASS7='$40,000 TO $49,999' INCLASS8='$50,000 TO $69,999'
1584            INCLASS9='$70,000 AND OVER'   INCLASS10='ALL CONSUMER UNITS';
1585      OPTIONS NODATE NOCENTER NONUMBER LS=167 PS=MAX;
1586      WHERE LINE NE 'OTHER';
1587      TITLE "DIARY EXPENDITURES FOR &YEAR BY INCOME BEFORE TAXES";
1588  RUN;

NOTE: There were 842 observations read from the data set WORK.TAB.
      WHERE LINE not = 'OTHER';
NOTE: PROCEDURE TABULATE used (Total process time):
      real time           1.67 seconds
      cpu time            0.04 seconds


